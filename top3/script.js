let teams = []; // –ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥
let schedule = []; // –ú–∞—Å—Å–∏–≤ —Ç—É—Ä–æ–≤, –∫–∞–∂–¥—ã–π —Ç—É—Ä - –º–∞—Å—Å–∏–≤ –º–∞—Ç—á–µ–π
let currentTourIndex = 0; // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç—É—Ä–∞
let standings = {}; // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥
let currentMatchDataForSpotify = null; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è Spotify —Å—Å—ã–ª–∫–∞

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const MAX_UNIQUE_DRAWS_PER_TOUR = 1; // –ú–∞–∫—Å–∏–º—É–º 1:1 –∑–∞ —Ç—É—Ä
const MAX_LARGE_WINS_PER_TOUR = 6; // –ú–∞–∫—Å–∏–º—É–º 4:0 / 0:4 / 3:1 / 1:3 –∑–∞ —Ç—É—Ä
const RELEGATION_ZONE_START = 121; // –ù–∞—á–∞–ª–æ –∑–æ–Ω—ã –≤—ã–ª–µ—Ç–∞
const PLAYOFF_ZONE_START = 101; // –ù–∞—á–∞–ª–æ –∑–æ–Ω—ã —Å—Ç—ã–∫–æ–≤
const STORAGE_KEY_TEAMS = 'tournamentTeams';
const STORAGE_KEY_SCHEDULE = 'tournamentSchedule';
const STORAGE_KEY_CURRENT_TOUR = 'tournamentCurrentTourIndex';

// --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
const teamsInput = document.getElementById('teamsInput');
const generateBtn = document.getElementById('generateBtn');
const resetBtn = document.getElementById('resetBtn');
const prevTourBtn = document.getElementById('prevTourBtn');
const nextTourBtn = document.getElementById('nextTourBtn');
const currentTourNumSpan = document.getElementById('currentTourNum');
const totalToursNumSpan = document.getElementById('totalToursNum');
const tourJumpInput = document.getElementById('tourJumpInput');
const jumpToTourBtn = document.getElementById('jumpToTourBtn');
const showFullScheduleBtn = document.getElementById('showFullScheduleBtn');
const showStandingsBtn = document.getElementById('showStandingsBtn');
const currentTourOutput = document.getElementById('currentTourOutput');
const fullScheduleModal = document.getElementById('fullScheduleModal');
const fullScheduleContent = document.getElementById('fullScheduleContent');
const closeFullScheduleBtn = fullScheduleModal.querySelector('.close-button');
const standingsModal = document.getElementById('standingsModal');
const standingsBodyModal = document.getElementById('standingsBodyModal');
const closeStandingsBtn = standingsModal.querySelector('.close-button');
const spotifyModal = document.getElementById('spotifyModal');
const spotifyUrlInput = document.getElementById('spotifyUrlInput');
const saveSpotifyUrlBtn = document.getElementById('saveSpotifyUrlBtn');
const currentSpotifyInfo = document.getElementById('currentSpotifyInfo');
const closeSpotifyModalBtn = spotifyModal.querySelector('.close-button');

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
function saveData() {
    localStorage.setItem(STORAGE_KEY_TEAMS, JSON.stringify(teams));
    localStorage.setItem(STORAGE_KEY_SCHEDULE, JSON.stringify(schedule));
    localStorage.setItem(STORAGE_KEY_CURRENT_TOUR, currentTourIndex.toString());
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ `standings` –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É –µ–µ –æ—Ç–¥–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
}

function loadData() {
    const savedTeams = localStorage.getItem(STORAGE_KEY_TEAMS);
    const savedSchedule = localStorage.getItem(STORAGE_KEY_SCHEDULE);
    const savedCurrentTourIndex = localStorage.getItem(STORAGE_KEY_CURRENT_TOUR);

    if (savedTeams) {
        teams = JSON.parse(savedTeams);
        teamsInput.value = teams.join('\n'); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ textarea
    }
    if (savedSchedule) {
        schedule = JSON.parse(savedSchedule);
    }
    if (savedCurrentTourIndex) {
        currentTourIndex = parseInt(savedCurrentTourIndex, 10);
    } else {
        currentTourIndex = 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π —Ç—É—Ä
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (teams.length > 0 && schedule.length > 0) {
        updateStandings(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        displayTour(currentTourIndex);
        updateNavigationButtons();
        displayFullSchedule();
        updateStandingsDataAndDisplay();
    } else {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        currentTourOutput.innerHTML = '<p>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ".</p>';
        currentTourNumSpan.textContent = '0';
        totalToursNumSpan.textContent = '0';
        updateNavigationButtons();
    }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ ---
function openModal(modal) {
    modal.style.display = 'block';
}

function closeModal(modal) {
    modal.style.display = 'none';
    currentMatchDataForSpotify = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    spotifyUrlInput.value = '';
    currentSpotifyInfo.textContent = '';
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–∞–º–∏ ---
function displayTour(tourIndex) {
    currentTourIndex = tourIndex;
    if (currentTourNumSpan) currentTourNumSpan.textContent = tourIndex + 1;
    if (totalToursNumSpan) totalToursNumSpan.textContent = schedule.length;

    currentTourOutput.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—É—Ä

    if (tourIndex < 0 || tourIndex >= schedule.length) {
        currentTourOutput.innerHTML = '<p>–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>';
        updateNavigationButtons();
        return;
    }

    const matches = schedule[tourIndex];
    const tourTitle = document.createElement('h3');
    tourTitle.textContent = `–¢—É—Ä ${tourIndex + 1}`;
    currentTourOutput.appendChild(tourTitle);

    // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—É—Ä–∞
    const validationMessageDiv = document.createElement('div');
    validationMessageDiv.id = 'validationMessage';
    validationMessageDiv.style.color = 'orange';
    validationMessageDiv.style.marginBottom = '10px';
    validationMessageDiv.style.textAlign = 'center'; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    currentTourOutput.appendChild(validationMessageDiv);

    const tourMatchesDiv = document.createElement('div');
    tourMatchesDiv.className = 'matches-list';

    if (matches.length === 0) {
        tourMatchesDiv.innerHTML = '<p>–ú–∞—Ç—á–µ–π –≤ —ç—Ç–æ–º —Ç—É—Ä–µ –Ω–µ—Ç.</p>';
    } else {
        matches.forEach((match, matchIndex) => {
            const matchElement = document.createElement('div');
            matchElement.className = 'match-item';

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
            const removeHomeTeamBtn = document.createElement('button');
            removeHomeTeamBtn.className = 'remove-team-btn';
            removeHomeTeamBtn.innerHTML = '‚ùåÔ∏è';
            removeHomeTeamBtn.title = `–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ${match.homeTeam}`;
            removeHomeTeamBtn.onclick = (e) => {
                e.preventDefault();
                removeTeam(match.homeTeam);
            };

            const removeAwayTeamBtn = document.createElement('button');
            removeAwayTeamBtn.className = 'remove-team-btn';
            removeAwayTeamBtn.innerHTML = '‚ùåÔ∏è';
            removeAwayTeamBtn.title = `–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ${match.awayTeam}`;
            removeAwayTeamBtn.onclick = (e) => {
                e.preventDefault();
                removeTeam(match.awayTeam);
            };

            // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –º–∞—Ç—á–∞
            matchElement.innerHTML = `
                <span class="team-name">${match.homeTeam}</span>
                <div class="score-input">
                    <input type="number" class="score-home" min="0" max="10" value="${match.homeScore || ''}" data-tour-index="${tourIndex}" data-match-index="${matchIndex}" data-team="home" placeholder="-">
                    <span>:</span>
                    <input type="number" class="score-away" min="0" max="10" value="${match.awayScore || ''}" data-tour-index="${tourIndex}" data-match-index="${matchIndex}" data-team="away" placeholder="-">
                </div>
                <span class="team-name">${match.awayTeam}</span>
                <div class="spotify-links">
                    <a href="#" class="spotify-link" data-tour-index="${tourIndex}" data-match-index="${matchIndex}" data-team="home" title="–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é">üé∂</a>
                    <a href="#" class="spotify-link" data-tour-index="${tourIndex}" data-match-index="${matchIndex}" data-team="away" title="–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é">üé∂</a>
                </div>
            `;

            // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–∞–Ω–¥
            matchElement.prepend(removeHomeTeamBtn);
            matchElement.querySelector('.team-name:last-of-type').parentNode.insertBefore(removeAwayTeamBtn, matchElement.querySelector('.team-name:last-of-type').nextSibling);

            tourMatchesDiv.appendChild(matchElement);
        });
    }
    currentTourOutput.appendChild(tourMatchesDiv);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞
    addScoreInputListeners();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–∞ –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
    validateTourResults(matches);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateNavigationButtons();
}

function updateNavigationButtons() {
    prevTourBtn.disabled = currentTourIndex === 0;
    nextTourBtn.disabled = currentTourIndex === schedule.length - 1 || schedule.length === 0;
}

function findFirstUnscoredMatchTour() {
    if (schedule.length === 0) return 0;
    for (let i = 0; i < schedule.length; i++) {
        const tour = schedule[i];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞—Ç—á –±–µ–∑ —Å—á–µ—Ç–∞ –≤ —ç—Ç–æ–º —Ç—É—Ä–µ
        if (tour.some(match => !match.score || match.score === "")) {
            return i; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç—É—Ä–∞
        }
    }
    return 0; // –ï—Å–ª–∏ –≤—Å–µ —Å—á–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—É—Ä
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
function generateSchedule() {
    schedule = []; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    const numTeams = teams.length;
    const numRounds = numTeams - 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ (—Ç—É—Ä–æ–≤)
    const numMatchesPerRound = Math.floor(numTeams / 2); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ –∫–∞–∂–¥–æ–º —Ä–∞—É–Ω–¥–µ

    let currentTeams = [...teams]; // –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

    for (let round = 0; round < numRounds; round++) {
        const currentRoundMatches = [];
        for (let i = 0; i < numMatchesPerRound; i++) {
            const homeTeam = currentTeams[i];
            const awayTeam = currentTeams[numTeams - 1 - i];
            currentRoundMatches.push({
                homeTeam: homeTeam,
                awayTeam: awayTeam,
                score: "", // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å—á–µ—Ç –ø—É—Å—Ç–æ–π
                homeSpotifyUrl: "", // Spotify —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
                awaySpotifyUrl: ""  // Spotify —Å—Å—ã–ª–∫–∞ –¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            });
        }
        schedule.push(currentRoundMatches);

        // –†–æ—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã)
        const firstTeam = currentTeams[0];
        const rotatingTeams = currentTeams.slice(1);
        const lastTeam = rotatingTeams.pop();
        currentTeams = [firstTeam, lastTeam, ...rotatingTeams];
    }
    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –Ω–µ—á–µ—Ç–Ω–æ–µ, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å "BYE"
    if (numTeams % 2 !== 0) {
        // –í—Å—Ç–∞–≤–ª—è–µ–º 'BYE' –≤ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–∞
        schedule.forEach((tour, tourIndex) => {
            const byeTeamIndex = (tourIndex % numTeams); // –ò–Ω–¥–µ–∫—Å, –∫—É–¥–∞ –≤—Å—Ç–∞–≤–∏—Ç—å 'BYE'
            const byeTeam = teams[byeTeamIndex]; // –ù–∞—Ö–æ–¥–∏–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å

            // –ù–∞—Ö–æ–¥–∏–º, –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "BYE" –≤ —Ç–µ–∫—É—â–µ–º —Ç—É—Ä–µ
            // –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ "BYE" –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ
            // –ë–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ —ç—Ç–æ–º —Ç—É—Ä–µ
            // –î–ª—è —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Round Robin, –ø—Ä–æ—â–µ –¥–æ–±–∞–≤–∏—Ç—å "BYE" –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ—á–µ—Ç–Ω–∞—è
            // –ù–æ —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å 149 —Ç—É—Ä–æ–≤, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥, –≥–¥–µ BYE –Ω–µ –±—É–¥–µ—Ç
            // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ, —ç—Ç–æ—Ç –±–ª–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.
        });
        // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—á–µ—Ç–Ω–æ–µ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
        // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ —á–µ—Ç–Ω–æ–µ, –∏ 149 —Ç—É—Ä–æ–≤ - —ç—Ç–æ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ –∫–æ–º–∞–Ω–¥.
    }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã ---
function updateStandings() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º
    teams.forEach(team => {
        standings[team] = { played: 0, wins: 0, draws: 0, losses: 0, goalsFor: 0, goalsAgainst: 0, points: 0 };
    });

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã –∏ –≤—Å–µ –º–∞—Ç—á–∏
    schedule.forEach(tour => {
        tour.forEach(match => {
            if (match.score && match.score !== "") {
                const scores = match.score.split(':').map(Number);
                if (scores.length === 2) {
                    const homeScore = scores[0];
                    const awayScore = scores[1];
                    const homeTeam = match.homeTeam;
                    const awayTeam = match.awayTeam;

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
                    standings[homeTeam].played++;
                    standings[homeTeam].goalsFor += homeScore;
                    standings[homeTeam].goalsAgainst += awayScore;
                    if (homeScore > awayScore) {
                        standings[homeTeam].wins++;
                        standings[homeTeam].points += 3;
                    } else if (homeScore === awayScore) {
                        standings[homeTeam].draws++;
                        standings[homeTeam].points += 1;
                    } else {
                        standings[homeTeam].losses++;
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
                    standings[awayTeam].played++;
                    standings[awayTeam].goalsFor += awayScore;
                    standings[awayTeam].goalsAgainst += homeScore;
                    if (awayScore > homeScore) {
                        standings[awayTeam].wins++;
                        standings[awayTeam].points += 3;
                    } else if (awayScore === homeScore) {
                        standings[awayTeam].draws++;
                        standings[awayTeam].points += 1;
                    } else {
                        standings[awayTeam].losses++;
                    }
                }
            }
        });
    });

    // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—É—Ä–∞
    if (schedule[currentTourIndex]) {
        validateTourResults(schedule[currentTourIndex]);
    }
}

function displayStandingsInModal() {
    standingsBodyModal.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const sortedStandings = Object.entries(standings).sort(([teamA_name, teamA_data], [teamB_name, teamB_data]) => {
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—á–∫–∞–º (desc), –∑–∞—Ç–µ–º –ø–æ —Ä–∞–∑–Ω–∏—Ü–µ –º—è—á–µ–π (desc), –∑–∞—Ç–µ–º –ø–æ –∑–∞–±–∏—Ç—ã–º –≥–æ–ª–∞–º (desc)
        if (teamB_data.points !== teamA_data.points) return teamB_data.points - teamA_data.points;
        const diffA = teamA_data.goalsFor - teamA_data.goalsAgainst;
        const diffB = teamB_data.goalsFor - teamB_data.goalsAgainst;
        if (diffB !== diffA) {
            return diffB - diffA;
        }
        return teamB_data.goalsFor - teamA_data.goalsFor;
    });

    sortedStandings.forEach(([teamName, data], index) => {
        const row = standingsBodyModal.insertRow();
        const position = index + 1; // –ü–æ–∑–∏—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)

        row.innerHTML = `
            <td>${position}</td> <!-- –ù–æ–º–µ—Ä –ø–æ –ø–æ—Ä—è–¥–∫—É -->
            <td>${teamName}</td>
            <td>${data.played}</td>
            <td>${data.wins}</td>
            <td>${data.draws}</td>
            <td>${data.losses}</td>
            <td>${data.goalsFor}</td>
            <td>${data.goalsAgainst}</td>
            <td>${data.goalsFor - data.goalsAgainst}</td>
            <td>${data.points}</td>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∑–æ–Ω –≤—ã–ª–µ—Ç–∞ –∏ —Å—Ç—ã–∫–æ–≤
        if (position >= RELEGATION_ZONE_START && position <= RELEGATION_ZONE_START + 29) { // 121-150
            row.classList.add('relegation-zone');
        } else if (position >= PLAYOFF_ZONE_START && position <= PLAYOFF_ZONE_START + 19) { // 101-120
            row.classList.add('playoff-zone');
        }
    });
}

function updateStandingsDataAndDisplay() {
    updateStandings(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    displayStandingsInModal(); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–∞ ---
function validateTourResults(tourMatches) {
    let drawCount1_1 = 0; // –°—á–µ—Ç 1:1
    let largeWinCount = 0; // –°—á–µ—Ç 4:0, 0:4, 3:1, 1:3

    tourMatches.forEach(match => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω
        if (match.score && match.score !== "") {
            const scores = match.score.split(':').map(Number);
            if (scores.length === 2) {
                const score1 = scores[0];
                const score2 = scores[1];

                if (score1 === 1 && score2 === 1) {
                    drawCount1_1++;
                } else if (
                    (score1 === 4 && score2 === 0) || (score1 === 0 && score2 === 4) ||
                    (score1 === 3 && score2 === 1) || (score1 === 1 && score2 === 3)
                ) {
                    largeWinCount++;
                }
            }
        }
    });

    let validationMessage = "";
    if (drawCount1_1 > MAX_UNIQUE_DRAWS_PER_TOUR) {
        validationMessage += `–í–Ω–∏–º–∞–Ω–∏–µ: –í —ç—Ç–æ–º —Ç—É—Ä–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${drawCount1_1} –º–∞—Ç—á–µ–π —Å–æ —Å—á–µ—Ç–æ–º 1:1 (–º–∞–∫—Å–∏–º—É–º ${MAX_UNIQUE_DRAWS_PER_TOUR}). `;
    }
    if (largeWinCount > MAX_LARGE_WINS_PER_TOUR) {
        validationMessage += `–í–Ω–∏–º–∞–Ω–∏–µ: –í —ç—Ç–æ–º —Ç—É—Ä–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${largeWinCount} –º–∞—Ç—á–µ–π —Å –∫—Ä—É–ø–Ω—ã–º —Å—á–µ—Ç–æ–º (–º–∞–∫—Å–∏–º—É–º ${MAX_LARGE_WINS_PER_TOUR}). `;
    }

    const messageDiv = document.getElementById('validationMessage');
    if (messageDiv) {
        messageDiv.textContent = validationMessage;
    }
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
function displayFullSchedule() {
    fullScheduleContent.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

    if (schedule.length === 0) {
        fullScheduleContent.innerHTML = '<p>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.</p>';
        return;
    }

    schedule.forEach((tour, tourIndex) => {
        const tourDiv = document.createElement('div');
        tourDiv.style.marginBottom = '20px';

        const tourTitle = document.createElement('h3');
        tourTitle.textContent = `–¢—É—Ä ${tourIndex + 1}`;
        tourDiv.appendChild(tourTitle);

        if (tour.length === 0) {
            tourDiv.innerHTML += '<p>–ú–∞—Ç—á–µ–π –Ω–µ—Ç.</p>';
        } else {
            const matchesList = document.createElement('ul');
            matchesList.style.listStyle = 'none';
            matchesList.style.padding = '0';

            tour.forEach(match => {
                const matchItem = document.createElement('li');
                matchItem.style.marginBottom = '8px';
                matchItem.style.display = 'flex';
                matchItem.style.alignItems = 'center';
                matchItem.style.justifyContent = 'space-between';
                matchItem.style.maxWidth = '500px';

                const scoreDisplay = match.score ? `(${match.score})` : '( - : - )';
                const homeTeamSpan = document.createElement('span');
                homeTeamSpan.textContent = match.homeTeam;
                homeTeamSpan.style.flexBasis = '30%';
                homeTeamSpan.style.textAlign = 'right';
                homeTeamSpan.style.wordBreak = 'break-word';

                const scoreSpan = document.createElement('span');
                scoreSpan.textContent = scoreDisplay;
                scoreSpan.style.flexBasis = '20%';
                scoreSpan.style.textAlign = 'center';

                const awayTeamSpan = document.createElement('span');
                awayTeamSpan.textContent = match.awayTeam;
                awayTeamSpan.style.flexBasis = '30%';
                awayTeamSpan.style.textAlign = 'left';
                awayTeamSpan.style.wordBreak = 'break-word';

                const spotifyLinksDiv = document.createElement('div');
                spotifyLinksDiv.className = 'spotify-links';
                spotifyLinksDiv.style.flexBasis = '20%';
                spotifyLinksDiv.style.justifyContent = 'center';

                const homeSpotifyLink = document.createElement('a');
                homeSpotifyLink.href = match.homeSpotifyUrl || "#";
                homeSpotifyLink.className = 'spotify-link';
                homeSpotifyLink.dataset.tourIndex = tourIndex;
                homeSpotifyLink.dataset.matchIndex = schedule.indexOf(tour); // –ò–Ω–¥–µ–∫—Å –º–∞—Ç—á–∞ –≤ —Ç—É—Ä–µ
                homeSpotifyLink.dataset.team = "home";
                homeSpotifyLink.title = `–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –¥–ª—è ${match.homeTeam}`;
                homeSpotifyLink.textContent = 'üé∂';
                if (!match.homeSpotifyUrl) {
                    homeSpotifyLink.onclick = handleSpotifyLinkClick;
                } else {
                    homeSpotifyLink.target = "_blank"; // –û—Ç–∫—Ä—ã–≤–∞—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                }

                const awaySpotifyLink = document.createElement('a');
                awaySpotifyLink.href = match.awaySpotifyUrl || "#";
                awaySpotifyLink.className = 'spotify-link';
                awaySpotifyLink.dataset.tourIndex = tourIndex;
                awaySpotifyLink.dataset.matchIndex = schedule.indexOf(tour);
                awaySpotifyLink.dataset.team = "away";
                awaySpotifyLink.title = `–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Å–Ω—é –¥–ª—è ${match.awayTeam}`;
                awaySpotifyLink.textContent = 'üé∂';
                 if (!match.awaySpotifyUrl) {
                    awaySpotifyLink.onclick = handleSpotifyLinkClick;
                } else {
                    awaySpotifyLink.target = "_blank";
                }

                spotifyLinksDiv.appendChild(homeSpotifyLink);
                spotifyLinksDiv.appendChild(awaySpotifyLink);

                matchItem.appendChild(homeTeamSpan);
                matchItem.appendChild(scoreSpan);
                matchItem.appendChild(awayTeamSpan);
                matchItem.appendChild(spotifyLinksDiv);

                matchesList.appendChild(matchItem);
            });
            tourDiv.appendChild(matchesList);
        }
        fullScheduleContent.appendChild(tourDiv);
    });
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ Spotify ---
function handleSpotifyLinkClick(event) {
    event.preventDefault();
    const link = event.target;
    const tourIndex = parseInt(link.dataset.tourIndex);
    const matchIndex = parseInt(link.dataset.matchIndex);
    const teamType = link.dataset.team;

    if (schedule[tourIndex] && schedule[tourIndex][matchIndex]) {
        currentMatchDataForSpotify = {
            tourIndex: tourIndex,
            matchIndex: matchIndex,
            teamType: teamType,
            teamName: schedule[tourIndex][matchIndex][teamType + 'Team']
        };

        const currentUrl = schedule[tourIndex][matchIndex][teamType + 'SpotifyUrl'];
        if (currentUrl) {
            spotifyUrlInput.value = currentUrl;
            currentSpotifyInfo.textContent = `–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è ${currentMatchDataForSpotify.teamName}: ${currentUrl}`;
        } else {
            spotifyUrlInput.value = '';
            currentSpotifyInfo.textContent = `–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è ${currentMatchDataForSpotify.teamName}:`;
        }
        openModal(spotifyModal);
    } else {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –¥–ª—è Spotify:", tourIndex, matchIndex);
    }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Spotify —Å—Å—ã–ª–∫–∏ ---
saveSpotifyUrlBtn.onclick = () => {
    if (!currentMatchDataForSpotify) {
        alert("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        return;
    }
    const url = spotifyUrlInput.value.trim();

    if (url && (url.includes("spotify.com/track/") || url.includes("open.spotify.com/track/"))) {
        const { tourIndex, matchIndex, teamType } = currentMatchDataForSpotify;
        schedule[tourIndex][matchIndex][teamType + 'SpotifyUrl'] = url;

        displayTour(currentTourIndex);
        displayFullSchedule();

        const linkElement = document.querySelector(`.spotify-link[data-tour-index='${tourIndex}'][data-match-index='${matchIndex}'][data-team='${teamType}']`);
        if (linkElement) {
            linkElement.href = url;
            linkElement.target = "_blank";
            linkElement.onclick = null;
        }

        closeModal(spotifyModal);
        saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        alert("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Å–Ω—é —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");

    } else if (url === "") {
        const { tourIndex, matchIndex, teamType } = currentMatchDataForSpotify;
        schedule[tourIndex][matchIndex][teamType + 'SpotifyUrl'] = "";

        displayTour(currentTourIndex);
        displayFullSchedule();

        const linkElement = document.querySelector(`.spotify-link[data-tour-index='${tourIndex}'][data-match-index='${matchIndex}'][data-team='${teamType}']`);
        if (linkElement) {
            linkElement.href = "#";
            linkElement.target = "_self";
            linkElement.onclick = handleSpotifyLinkClick;
        }
        closeModal(spotifyModal);
        saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        alert("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Å–Ω—é —É–¥–∞–ª–µ–Ω–∞.");
    } else {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ Spotify.");
    }
};

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
generateBtn.onclick = () => {
    const teamsText = teamsInput.value.trim();
    if (teamsText) {
        teams = teamsText.split('\n').map(team => team.trim()).filter(team => team.length > 0);
        if (teams.length < 2) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –∫–æ–º–∞–Ω–¥—ã.');
            return;
        }
        // –°–±—Ä–æ—Å –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
        schedule = [];
        standings = {};
        teams.forEach(team => {
            standings[team] = { played: 0, wins: 0, draws: 0, losses: 0, goalsFor: 0, goalsAgainst: 0, points: 0 };
        });

        generateSchedule(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        currentTourIndex = findFirstUnscoredMatchTour(); // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ç—É—Ä
        displayTour(currentTourIndex); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
        updateNavigationButtons(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        displayFullSchedule(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        updateStandingsDataAndDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    } else {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.');
    }
};

resetBtn.onclick = () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        return;
    }
    teamsInput.value = '';
    teams = [];
    schedule = [];
    currentTourIndex = 0;
    standings = {};
    localStorage.removeItem(STORAGE_KEY_TEAMS);
    localStorage.removeItem(STORAGE_KEY_SCHEDULE);
    localStorage.removeItem(STORAGE_KEY_CURRENT_TOUR);
    currentTourOutput.innerHTML = '<p>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ".</p>';
    fullScheduleContent.innerHTML = '';
    standingsBodyModal.innerHTML = '';
    currentTourNumSpan.textContent = '0';
    totalToursNumSpan.textContent = '0';
    tourJumpInput.value = '';
    updateNavigationButtons();
};

prevTourBtn.onclick = () => {
    if (currentTourIndex > 0) {
        displayTour(currentTourIndex - 1);
        saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç—É—Ä
    }
};

nextTourBtn.onclick = () => {
    if (currentTourIndex < schedule.length - 1) {
        displayTour(currentTourIndex + 1);
        saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç—É—Ä
    }
};

jumpToTourBtn.onclick = () => {
    const tourNumber = parseInt(tourJumpInput.value);
    if (tourNumber >= 1 && tourNumber <= schedule.length) {
        displayTour(tourNumber - 1);
        tourJumpInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç—É—Ä
    } else if (schedule.length === 0) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.');
    }
    else {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—É—Ä–∞ –æ—Ç 1 –¥–æ ' + schedule.length);
    }
};

showFullScheduleBtn.onclick = () => {
    displayFullSchedule();
    openModal(fullScheduleModal);
};

showStandingsBtn.onclick = () => {
    updateStandingsDataAndDisplay();
    openModal(standingsModal);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
closeFullScheduleBtn.onclick = () => closeModal(fullScheduleModal);
closeStandingsBtn.onclick = () => closeModal(standingsModal);
closeSpotifyModalBtn.onclick = () => closeModal(spotifyModal);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
window.onclick = (event) => {
    if (event.target === fullScheduleModal) {
        closeModal(fullScheduleModal);
    }
    if (event.target === standingsModal) {
        closeModal(standingsModal);
    }
    if (event.target === spotifyModal) {
        closeModal(spotifyModal);
    }
};

// --- –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞ ---
function addScoreInputListeners() {
    document.querySelectorAll('.score-input input').forEach(input => {
        input.addEventListener('input', (e) => {
            const tourIndex = parseInt(e.target.dataset.tourIndex);
            const matchIndex = parseInt(e.target.dataset.matchIndex);
            const teamType = e.target.dataset.team; // 'home' –∏–ª–∏ 'away'

            if (schedule[tourIndex] && schedule[tourIndex][matchIndex]) {
                // –ü–æ–ª—É—á–∞–µ–º –æ–±–∞ —Å—á–µ—Ç–∞
                const scoreHomeInput = e.target.closest('.match-item').querySelector('.score-home');
                const scoreAwayInput = e.target.closest('.match-item').querySelector('.score-away');

                const scoreHome = parseInt(scoreHomeInput.value) || 0;
                const scoreAway = parseInt(scoreAwayInput.value) || 0;

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                schedule[tourIndex][matchIndex].score = `${scoreHome}:${scoreAway}`;

                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
                updateStandingsDataAndDisplay();

                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—É—Ä, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –∏ Spotify –∫–Ω–æ–ø–∫–∏
                displayTour(currentTourIndex);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞
                validateTourResults(schedule[tourIndex]);

                saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à –¥–ª—è –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞
        input.addEventListener('keydown', (e) => {
            // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –¥–≤–æ–µ—Ç–æ—á–∏–µ, Backspace, Delete, —Å—Ç—Ä–µ–ª–∫–∏, Tab
            if (e.key.length === 1 && !/[0-9:]/.test(e.key) && !['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'].includes(e.key)) {
                e.preventDefault();
            }
            // –ü–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ –≤–≤–æ–¥–∞ —Å—á–µ—Ç–∞ (home -> away)
            if (e.key === 'ArrowRight' && e.target.classList.contains('score-home')) {
                e.target.closest('.match-item').querySelector('.score-away').focus();
                e.preventDefault();
            }
            if (e.key === 'ArrowLeft' && e.target.classList.contains('score-away')) {
                e.target.closest('.match-item').querySelector('.score-home').focus();
                e.preventDefault();
            }
        });

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ '-'
        input.addEventListener('focus', (e) => {
            if (e.target.value === '-' || e.target.value === '') {
                e.target.value = '';
            }
        });

        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ '-' –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
        input.addEventListener('blur', (e) => {
            if (e.target.value === '') {
                e.target.value = '-'; // –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º '-'
                // –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç –≤ schedule, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—á–∏—â–µ–Ω
                const tourIndex = parseInt(e.target.dataset.tourIndex);
                const matchIndex = parseInt(e.target.dataset.matchIndex);
                if (schedule[tourIndex] && schedule[tourIndex][matchIndex]) {
                     const scoreHome = parseInt(e.target.closest('.match-item').querySelector('.score-home').value) || 0;
                     const scoreAway = parseInt(e.target.closest('.match-item').querySelector('.score-away').value) || 0;
                     schedule[tourIndex][matchIndex].score = `${scoreHome}:${scoreAway}`;
                     updateStandingsDataAndDisplay();
                     validateTourResults(schedule[tourIndex]);
                     saveData();
                }
            }
        });
    });
}

// --- –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ---
function removeTeam(teamNameToRemove) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É "${teamNameToRemove}"? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.`)) {
        return;
    }

    teams = teams.filter(team => team !== teamNameToRemove);
    schedule = [];
    standings = {};
    teams.forEach(team => {
        standings[team] = { played: 0, wins: 0, draws: 0, losses: 0, goalsFor: 0, goalsAgainst: 0, points: 0 };
    });

    if (teams.length < 2) {
        alert("–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö –∫–æ–º–∞–Ω–¥. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.");
        resetBtn.click(); // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
        return;
    }

    generateSchedule();
    currentTourIndex = findFirstUnscoredMatchTour();
    displayTour(currentTourIndex);
    updateNavigationButtons();
    displayFullSchedule();
    updateStandingsDataAndDisplay();
    saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
document.addEventListener('DOMContentLoaded', () => {
    loadData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    generateBtn.onclick = generateBtn.onclick; // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è
    resetBtn.onclick = resetBtn.onclick;
    prevTourBtn.onclick = prevTourBtn.onclick;
    nextTourBtn.onclick = nextTourBtn.onclick;
    jumpToTourBtn.onclick = jumpToTourBtn.onclick;
    showFullScheduleBtn.onclick = showFullScheduleBtn.onclick;
    showStandingsBtn.onclick = showStandingsBtn.onclick;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    closeFullScheduleBtn.onclick = () => closeModal(fullScheduleModal);
    closeStandingsBtn.onclick = () => closeModal(standingsModal);
    closeSpotifyModalBtn.onclick = () => closeModal(spotifyModal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    window.onclick = (event) => {
        if (event.target === fullScheduleModal) {
            closeModal(fullScheduleModal);
        }
        if (event.target === standingsModal) {
            closeModal(standingsModal);
        }
        if (event.target === spotifyModal) {
            closeModal(spotifyModal);
        }
    };

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (teams.length > 0 && schedule.length > 0) {
        displayTour(currentTourIndex);
        updateNavigationButtons();
        displayFullSchedule();
        updateStandingsDataAndDisplay();
    } else {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        currentTourOutput.innerHTML = '<p>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ".</p>';
        currentTourNumSpan.textContent = '0';
        totalToursNumSpan.textContent = '0';
        updateNavigationButtons();
    }
});